[{"id":0,"href":"/isomode/docs/installation/","title":"Installation","section":"Docs","content":" Installation # Installation Methods # Install from PyPI (Recommended) # The easiest way to install IsoMode is through pip:\npip install isomode --user Install from Source # To install from source: Download the source code, extract it to the isomode directory,\ncd isomode pip install . --user This method is useful if you want to modify the source code or contribute to development.\nDependencies # IsoMode has several dependencies that need to be installed, but they are automatically installed when you install IsoMode via pip. However, if you want to install them manually, they are listed below:\nDependencies # ASE (atomic simulation environment) numpy spglib (for space group) abipy (for reading netcdf files) request (for interacting with the findsym and isodistort server) bs4 (for parsing the html pages) Optional dependencies:\nanaddb compiled with netcdf (not needed by the package but required for generating *PHBST.nc files) "},{"id":1,"href":"/isomode/docs/phonon-modes/","title":"Labeling Phonon Modes","section":"Docs","content":" Labeling Phonon Modes # The label_phbst function and CLI allow you to label phonon modes from ABINIT PHBST calculations. The function can label the modes for the selected q-points. Note that the qpoints should be included in the PHBST file, and the supercell matrix should be compatible with the qpoints.\nPython Function Usage # Basic Usage # For basic usage with default parameters:\nfrom isomode.anamode import label_phbst label_phbst(\u0026#39;run.abo_PHBST.nc\u0026#39;, \u0026#39;results.txt\u0026#39;) Advanced Usage # For custom supercell and q-points:\nimport numpy as np from isomode.anamode import label_phbst # Define a 2x2x2 supercell sc = np.eye(3) * 2 # Specify q-points of interest qpts = {\u0026#39;Gamma\u0026#39;: [0,0,0], \u0026#39;X\u0026#39;: [0.5,0,0]} # Run the analysis label_phbst(\u0026#39;phonons.nc\u0026#39;, \u0026#39;modes.txt\u0026#39;, sc_mat=sc, qdict=qpts) Command Line Interface # The module provides a convenient CLI for easy usage:\nBasic Usage # python -m isomode.anamode input.nc output.txt Advanced Usage # python -m isomode.anamode input.nc output.txt \\ --sc_mat 2 2 2 \\ --qpoints Gamma 0 0 0 X 0.5 0 0 CLI Options # --tmpdir: Temporary directory (default: auto-created) --sc_mat: Supercell matrix as 3 integers (default: 2 2 2) Note: Should be compatible with the qpoints --qpoints: Q-points as alternating labels and coordinates Example: \u0026ldquo;Gamma 0 0 0 X 0.5 0 0\u0026rdquo; Output Format # The output file follows this format:\n# qname id freq(cm-1) label symmetry Gamma 0 100.0 GM1+ A1g Gamma 1 150.0 GM2- Eg ... Each line contains:\nqname: Name of the q-point id: Mode identifier freq: Frequency in cm⁻¹ label: Mode label symmetry: Symmetry classification "},{"id":2,"href":"/isomode/docs/symmetry-analysis/","title":"Symmetry Analysis","section":"Docs","content":" Symmetry Analysis # IsoMode provides tools to identify symmetry-adapted modes by comparing a high-symmetry structure with a low-symmetry structure.\nUsing view_distort.py # The view_distort.py command is the main tool for symmetry analysis. It takes a parent structure (high symmetry) and a distorted structure (low symmetry) as inputs and analyzes the symmetry-adapted modes that relate them.\nCommand Usage # view_distort.py -p PARENT -d DISTORT -o OUTPUT Command Options # -p, --parent: Parent (high symmetry) CIF file name -d, --distort: Distorted (low symmetry) CIF file name -o, --output: Output filename for mode details Example Usage # Here\u0026rsquo;s an example analyzing a P21/c YNiO3 structure against its cubic parent:\nview_distort.py -p cubic_std.cif -d P21c.cif -o mode_details.txt Understanding the Output # The command outputs mode amplitudes and their relative contributions. Example output:\n[1/2,1/2,1/2]R5-: 2.9567 0.7392 [1/2,1/2,0]M2+: 2.2424 0.5606 [0,1/2,0]X5-: 1.6549 0.4137 [1/2,1/2,1/2]R4-: 0.4241 0.1060 [1/2,1/2,1/2]R2-: 0.2839 0.0710 [1/2,1/2,0]M3+: 0.1099 0.0275 [1/2,1/2,0]M5+: 0.0695 0.0174 [1/2,1/2,1/2]R3-: 0.0199 0.0050 [0,0,0]GM4-: 0.0006 0.0001 [0,0,0]GM5-: 0.0004 0.0001 [0,1/2,0]X1+: 0.0004 0.0001 [0,1/2,0]X5+: 0.0003 0.0001 [1/2,1/2,0]M5-: 0.0003 0.0001 Total: 4.0971 1.0243 SPACEGROUP: P2_1/c (14) The output format is:\n[qpoint]label: amplitude_in_supercell amplitude_in_primitive(parent)_cell Important Notes # Small Amplitudes: Some modes may show very small non-zero amplitudes (like GM4-, GM5-, X1+, X5+, M5- in the example) due to numerical errors. These should typically be ignored.\nInternet Requirement: This tool requires internet access as it uses the ISODISTORT server (http://stokes.byu.edu/iso/isodistortform.php) for calculations.\nOutput File Details: The detailed output file (specified by -o) contains comprehensive mode decomposition information. The format follows the specification described at http://stokes.byu.edu/iso/isodistorthelp.php\n"},{"id":3,"href":"/isomode/docs/generating-structures/","title":"Generating Distorted Structures","section":"Docs","content":" Generating Distorted Structures # IsoMode can generate distorted structures based on phonon calculations. This feature requires proper setup of phonon band structure calculations.\nPrerequisites # You need a phonon band structure netcdf file that includes:\nZone-center points High-symmetry points Symmetry equivalent qpoints Important notes for phonon calculations:\nSymmetry equivalent qpoints must be included Do not add points between high-symmetry points (set ndivsm to 2) Example ANADDB Input # Here\u0026rsquo;s an example input for a Dion-Jacobson structure:\n# ANADB input for phonon bands and DOS ndivsm 2 nqpath 8 qpath 0.0 0.0 0.0 # Gamma 0.0 0.5 0.0 # Xy 0.5 0.0 0.0 # Xx 0.5 0.5 0.0 # M 0.5 0.0 0.5 # Rx 0.0 0.5 0.5 # Ry 0.5 0.5 0.5 # A 0.0 0.0 0.5 # Z asr 2 ngqpt 2 2 2 chneut 1 dipdip 0 ifcflag 1 nqshft 1 q1shft 0 0 0 Using gen_all.py # Create a copy of gen_all.py from the template directory Modify the parameters according to your needs Run the script Example Script # #!/usr/bin/env python import numpy as np from isomode.gen_all import run_all if __name__==\u0026#34;__main__\u0026#34;: run_all( fname=\u0026#39;./run.abo_PHBST.nc\u0026#39;, # phonon band netcdf file qdict={ \u0026#39;Gamma\u0026#39;: [0.0, 0.0, 0.0], \u0026#39;Xy\u0026#39;: [0, 0.5, 0], \u0026#39;Xx\u0026#39;: [0.5, 0.0, 0], \u0026#39;M\u0026#39;: [0.5, 0.5, 0], \u0026#39;Rx\u0026#39;: [0.5, 0.0, 0.5], \u0026#39;Ry\u0026#39;: [0.0, 0.5, 0.5], \u0026#39;A\u0026#39;: [0.5, 0.5, 0.5], \u0026#39;Z\u0026#39;: [0, 0, 0.5] }, # qpoints in netcdf file path=\u0026#39;tmp\u0026#39;, # temporary directory supercell_matrix=np.eye(3) * 2, # supercell matrix max_freq=0.0, # maximum frequency (0.0 for only unstable modes) amp=0.03, # amplitude of each mode pickle_fname=\u0026#39;all_modes.pickle\u0026#39;, # output pickle file cif_dir=\u0026#39;all_modes\u0026#39;, # output directory for CIF files primitive=True # whether to make it primitive ) Running the Script # To generate the structures:\npython gen_all.py Output Files # The script generates several outputs:\ntmp/primitive.cif: The primitive cell CIF file\nall_modes.pickle: Contains:\nDistorted structures (in ASE atoms format) Mode amplitudes Irreps labels Spacegroups for each structure all_modes/ directory: Contains CIF files for all generated distorted structures\nParameters Explanation # fname: Path to the PHBST netcdf file qdict: Dictionary mapping q-point names to coordinates path: Directory for temporary files supercell_matrix: Matrix defining the supercell max_freq: Maximum frequency cutoff (0.0 for unstable modes only) amp: Amplitude for mode distortions pickle_fname: Output file for structural data cif_dir: Directory for output CIF files primitive: Whether to generate primitive cells "}]